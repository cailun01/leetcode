#include "headers.h"
/*
你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，
影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，
如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。

给定一个代表每个房屋存放金额的非负整数数组，计算你不触动警报装置的情况下，一夜之内能够偷窃到的最高金额。

示例 1：
输入：[1,2,3,1]
输出：4
解释：偷窃1号房屋(金额=1)，然后偷窃3号房屋(金额=3)。
     偷窃到的最高金额 = 1 + 3 = 4 。

示例 2：
输入：[2,7,9,3,1]
输出：12
解释：偷窃1号房屋(金额 = 2), 偷窃3号房屋(金额=9)，接着偷窃 5号房屋 (金额 = 1)。
     偷窃到的最高金额 = 2 + 9 + 1 = 12 。

*/

// 自底而上
class Solution {
public:
    int rob(vector<int>& nums) {
        int size = nums.size();
        if (nums.empty()) return 0;
        if (size == 1) return nums[0];
        // dp[i]表示：第 i 间房子是被抢劫的最后一间，最多能抢到的钱为 x
        vector<int> dp(size + 2, 0);
        dp[0] = nums[0];
        dp[1] = max(nums[1], nums[0]);
        for (int i = 2; i < size; i++) {
            dp[i] = max(dp[i - 1], nums[i] + dp[i - 2]);
        }
        return dp[size - 1];
    }
};