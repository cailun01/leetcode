#include "headers.h"
/*
给你一个由 '1'（陆地）和 '0'（水）组成的的二维网格，请你计算网格中岛屿的数量。
岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。
此外，你可以假设该网格的四条边均被水包围。

示例 1：
输入：grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
输出：1

示例 2：
输入：grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
输出：3
*/

/* dfs
将网格看作“四叉树”，访问其上下左右的相邻格子。对于格子 (r, c)，四个相邻的格子分别是(r-1, c),(r+1, c),(r, c-1),(r, c+1)。
网格 DFS 中的 base case 是什么？从二叉树的 base case 对应过来，
应该是网格中不需要继续遍历、grid[r][c] 会出现数组下标越界异常的格子，也就是那些超出网格范围的格子。

如何避免重复遍历
网格结构的 DFS 与二叉树的 DFS 最大的不同之处在于，遍历中可能遇到遍历过的结点。
这是因为，网格结构本质上是一个「图」，我们可以把每个格子看成图中的结点，
每个结点有向上下左右的四条边。在图中遍历时，自然可能遇到重复遍历结点。
如何避免这样的重复遍历呢？答案是标记已经遍历过的格子。以岛屿问题为例，我们需要在所有值为 1 的陆地格子上做 DFS 遍历。
每走过一个陆地格子，就把格子的值改为 2，这样当我们遇到 2 的时候，就知道这是遍历过的格子了。也就是说，每个格子可能取三个值：
  0 —— 海洋格子
  1 —— 陆地格子（未遍历过）
  2 —— 陆地格子（已遍历过）

*/
class Solution {
private:
  void dfs(vector<vector<char>>& grid, int r, int c) {
    // 如果坐标 (r, c) 超出了网格范围，直接返回
    if (r >= grid.size() || c >= grid[0].size() || r < 0 || c < 0) {
      return;
    }
    // 遇到海洋或已访问的陆地也返回
    if (grid[r][c] != '1') {
      return;
    }
    // 将访问过的陆地记为'2'，表示已经访问过，避免重复遍历。
    grid[r][c] = '2';

    // 访问上、下、左、右四个相邻结点
    dfs(grid, r - 1, c);
    dfs(grid, r + 1, c);
    dfs(grid, r, c - 1);
    dfs(grid, r, c + 1);
  }

public:
  int numIslands(vector<vector<char>>& grid) {
    int num_rows = grid.size(); // 获取行数
    if (num_rows == 0) {
      return 0;
    } 
    int num_cols = grid[0].size(); // 获取列数

    int num_islands = 0;
    for (int r = 0; r < num_rows; ++r) {
      for (int c = 0; c < num_cols; ++c) {
        // 寻找没访问过的陆地
        if (grid[r][c] == '1') {
          ++num_islands;
          dfs(grid, r, c);
        }
      }
    }
    return num_islands;
  }
};
