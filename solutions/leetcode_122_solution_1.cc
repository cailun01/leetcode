/*122. 买卖股票的最佳时机 II
给定一个数组 prices ，其中 prices[i] 是一支给定股票第 i 天的价格。
设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。
注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

示例 1:
输入: prices = [7,1,5,3,6,4]
输出: 7
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。

示例 2:
输入: prices = [1,2,3,4,5]
输出: 4
解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。因为这样属于同时参与了多笔交易，
     你必须在再次购买前出售掉之前的股票。

示例 3:
输入: prices = [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
*/

/*
动态规划（通用）

第 1 步：定义状态
状态 dp[i][j] 定义如下：
dp[i][j] 表示到下标为i的这一天，持股状态为j时，我们手上拥有的最大现金数。
注意：限定持股状态为j是为了方便推导状态转移方程，这样的做法满足无后效性。

其中：
第一维 i 表示下标为 i 的那一天（ 具有前缀性质，即考虑了之前天数的交易 ）；
第二维 j 表示下标为 i 的那一天是持有股票，还是持有现金。
这里 0 表示持有现金（cash），1 表示持有股票（stock）。

第 2 步：思考状态转移方程
状态从持有现金（cash）开始，到最后一天我们关心的状态依然是持有现金（cash）；
每一天状态可以转移，也可以不动。状态转移用下图表示：

（状态转移方程写在代码中）

说明：
由于不限制交易次数，除了最后一天，每一天的状态可能不变化，也可能转移；
写代码的时候，可以不用对最后一天单独处理，输出最后一天，状态为 0 的时候的值即可。

第 3 步：确定初始值
起始的时候：
如果什么都不做，dp[0][0] = 0；
如果持有股票，当前拥有的现金数是当天股价的相反数，即 dp[0][1] = -prices[i]；

第 4 步：确定输出值
终止的时候，上面也分析了，输出 dp[len - 1][0]，因为一定有 dp[len - 1][0] > dp[len - 1][1]。

*/

class Solution {
public:
  int maxProfit(vector<int>& prices) {
    int num_days = prices.size();
    if (num_days <= 1) { 
      return 0; 
    }
    // 0：持有现金
    // 1：持有股票
    vector<vector<int>> dp(num_days, vector<int>(2));
    // 第一天持有现金
    dp[0][0] = 0;
    // 第一天持有股票
    dp[0][1] = -prices[0];

    for (int i = 1; i < num_days; ++i) {
      /* 第i天，不持有股票
      第i-1天也不持有股票，第i-1天持有股票，第i天卖掉
      */
      dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i]);
      /* 第i天，持有股票
      第i-1天也持有股票，第i-1天不持有股票，第i天买入
      */
      dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i]);
    }
    // 最后一天不持有股票
    return dp[num_days - 1][0];
  }
};
