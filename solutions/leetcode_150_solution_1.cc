/* 150 逆波兰表达式求值
根据 逆波兰表示法，求表达式的值。

有效的算符包括 +、-、*、/ 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。

说明：
整数除法只保留整数部分。
给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。

示例 1：
输入：tokens = ["2","1","+","3","*"]
输出：9
解释：该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9

示例 2：
输入：tokens = ["4","13","5","/","+"]
输出：6
解释：该算式转化为常见的中缀算术表达式为：(4 + (13 / 5)) = 6

示例 3：
输入：tokens = ["10","6","9","3","+","-11","*","/","*","17","+","5","+"]
输出：22
解释：
该算式转化为常见的中缀算术表达式为：
  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22
 

提示：

1 <= tokens.length <= 104
tokens[i] 要么是一个算符（"+"、"-"、"*" 或 "/"），要么是一个在范围 [-200, 200] 内的整数
 

逆波兰表达式：

逆波兰表达式是一种后缀表达式，所谓后缀就是指算符写在后面。

平常使用的算式则是一种中缀表达式，如 ( 1 + 2 ) * ( 3 + 4 ) 。
该算式的逆波兰表达式写法为 ( ( 1 2 + ) ( 3 4 + ) * ) 。
逆波兰表达式主要有以下两个优点：

去掉括号后表达式无歧义，上式即便写成 1 2 + 3 4 + * 也可以依据次序计算出正确结果。
适合用栈操作运算：遇到数字则入栈；遇到算符则取出栈顶两个数字进行计算，并将结果压入栈中。
*/

/* 思路
从左至右扫码后缀表达式，如果是操作数，就压入栈；如果是操作符，就连续弹出两个操作数。
注意，后弹出的是第一操作数（减法时作被减数，除法时作被除数），先弹出的是第二操作数
（减法时作减数，除法时作除数），然后进行操作符的操作，生成新的操作数再压入栈中。
反复扫描直到后缀表达式结束，此时栈内只有一个数，就是答案。
*/
class Solution {
public:
  int evalRPN(vector<string>& tokens) {
    int temp1, temp2;
    int idx = 0;
    stack<int> s;
    while (idx < tokens.size()) {
      string cur = tokens[idx];
      if (isNumber(cur)) {
        // 如果是数字，就压入栈。
        s.push(stoi(cur));
        idx++;
      } else { // 如果是操作符
        // temp2减法时作减数，除法时作除数
        temp2 = s.top();
        s.pop();
        // temp1减法时作被减数，除法时作被除数
        temp1 = s.top();
        s.pop();
        int num;
        if (cur == "+") {
          num = temp1 + temp2;
        } else if (cur == "-") {
          num = temp1 - temp2;
        } else if (cur == "*") {
          num = temp1 * temp2;
        } else if (cur == "/") {
          num = temp1 / temp2;
        }
        s.push(num);
        idx++;
      }
    }
    return s.top();
  }

  bool isNumber(string& token) {
    return !(token == "+" || token == "-" || token == "*" || token == "/");
  }
};